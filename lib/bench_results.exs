defmodule BenchResults do
  # Note: not captured here is the fact that `:observer` was sitting with
  # a line at roughly 2000MB when I checked in at the end of this suite run.
  # Benchee doesn't seem to see any of this memory usage when I run a profile
  # with`memory_time`; I suspect it's because the used memory is all callstack-
  # based, which their README makes note of not capturing statistics for
  # (Inability? Respect for the VM's privacy?). Regardless of why, I would
  # be remiss if I didn't mention that the iterative version of this,
  # very definitely, has a smaller memory footprint in these (egregiously
  # extreme) outer-limit benchmarks.
  def recursive, do: %Benchee.Suite{
    configuration: %Benchee.Configuration{
      after_each: nil,
      after_scenario: nil,
      assigns: %{},
      before_each: nil,
      before_scenario: nil,
      formatters: [Benchee.Formatters.Console],
      inputs: [
        {"1: 2^(2^15)", {2, 32768}},
        {"2: 2^(2^16)", {2, 65536}},
        {"3: 2^(2^17)", {2, 131072}},
        {"4: 2^(2^18)", {2, 262144}},
        {"5: 2^(2^19)", {2, 524288}},
        {"6: 3^(3^9)", {3, 19683}},
        {"7: 3^(3^10)", {3, 59049}},
        {"8: 3^(3^11)", {3, 177147}},
        {"9: 3^(3^12)", {3, 531441}},
        {"10: 5^(5^4)", {5, 625}},
        {"11: 5^(5^5)", {5, 3125}},
        {"12: 5^(5^6)", {5, 15625}},
        {"13: 5^(5^7)", {5, 78125}},
        {"14: 5^(5^8)", {5, 390625}},
        {"15: 7^(7^2)", {7, 49}},
        {"16: 7^(7^3)", {7, 343}},
        {"17: 7^(7^4)", {7, 2401}},
        {"18: 7^(7^5)", {7, 16807}},
        {"19: 7^(7^6)", {7, 117649}},
        {"20: 11^(11^2)", {11, 121}},
        {"21: 11^(11^3)", {11, 1331}},
        {"22: 11^(11^4)", {11, 14641}},
        {"23: 11^(11^5)", {11, 161051}}
      ],
      load: false,
      measure_function_call_overhead: true,
      memory_time: 0.0,
      parallel: 1,
      percentiles: '2c',
      pre_check: false,
      print: %{benchmarking: true, configuration: true, fast_warning: true},
      save: false,
      time: 1.5e10,
      title: nil,
      unit_scaling: :best,
      warmup: 3.0e9
    },
    scenarios: [
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {2, 32768},
        input_name: "1: 2^(2^15)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [3.03e5, 2.89e5, 2.83e5, 2.84e5, 2.84e5, 2.88e5, 3.21e5,
           2.85e5, 3.45e5, 2.89e5, 3.0e5, 2.84e5, 2.83e5, 4.59e5, 3.04e5, 3.06e5,
           2.85e5, 2.85e5, 2.84e5, 2.83e5, 2.84e5, 2.84e5, 2.84e5, 3.19e5, 2.84e5,
           2.84e5, 2.84e5, 2.83e5, 2.83e5, 2.84e5, 2.84e5, 2.83e5, 3.34e5, 2.89e5,
           3.36e5, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 309543.4601093809,
            ips: 3230.5641335360083,
            maximum: 2.264e6,
            median: 2.84e5,
            minimum: 2.82e5,
            mode: 2.84e5,
            percentiles: %{50 => 2.84e5, 99 => 556930.0000000002},
            relative_less: nil,
            relative_more: nil,
            sample_size: 47906,
            std_dev: 57985.96622290238,
            std_dev_ips: 605.1731238706982,
            std_dev_ratio: 0.18732738272813887
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {2, 65536},
        input_name: "2: 2^(2^16)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [1.492e6, 1.675e6, 2.536e6, 1.247e6, 1.347e6, 1.598e6, 1.606e6,
           1.4e6, 1.655e6, 1.285e6, 1.306e6, 1.622e6, 1.371e6, 2.281e6, 1.146e6,
           1.538e6, 1.122e6, 1.159e6, 1.175e6, 1.117e6, 1.116e6, 1.115e6, 1.116e6,
           1.114e6, 1.166e6, 1.268e6, 1.275e6, 1.127e6, 1.116e6, 1.116e6, 1.406e6,
           1.203e6, 1.125e6, 1.146e6, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 1204446.4646464647,
            ips: 830.2569100018283,
            maximum: 2.928e6,
            median: 1.128e6,
            minimum: 1.107e6,
            mode: 1.116e6,
            percentiles: %{50 => 1.128e6, 99 => 1920199.9999999988},
            relative_less: nil,
            relative_more: nil,
            sample_size: 12375,
            std_dev: 166799.06649241297,
            std_dev_ips: 114.9790228142929,
            std_dev_ratio: 0.13848607753718029
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {2, 131072},
        input_name: "3: 2^(2^17)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [5.271e6, 4.7e6, 5.252e6, 4.507e6, 4.453e6, 4.57e6, 4.483e6,
           4.469e6, 4.719e6, 4.797e6, 4.748e6, 4.446e6, 4.615e6, 4.43e6, 4.436e6,
           4.446e6, 4.437e6, 4.61e6, 4.673e6, 5.807e6, 6.06e6, 5.118e6, 4.446e6,
           5.372e6, 4.744e6, 4.511e6, 4.764e6, 4.666e6, 4.517e6, 4.645e6, 4.499e6,
           4.692e6, 4.523e6, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 4741605.580215599,
            ips: 210.89902630714602,
            maximum: 1.0008e7,
            median: 4.5445e6,
            minimum: 4.4e6,
            mode: 4.432e6,
            percentiles: %{50 => 4.5445e6, 99 => 6507899.999999996},
            relative_less: nil,
            relative_more: nil,
            sample_size: 3154,
            std_dev: 479051.9384184131,
            std_dev_ips: 21.307463401120835,
            std_dev_ratio: 0.1010315873629942
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {2, 262144},
        input_name: "4: 2^(2^18)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [2.0495e7, 1.8583e7, 1.9444e7, 1.8578e7, 1.8668e7, 2.0331e7,
           1.8405e7, 1.7869e7, 1.8117e7, 1.8164e7, 2.1486e7, 1.9653e7, 1.7854e7,
           1.8339e7, 1.8427e7, 1.8407e7, 2.0378e7, 1.8678e7, 1.8265e7, 1.8826e7,
           1.8602e7, 2.24e7, 1.8716e7, 1.9334e7, 1.8675e7, 1.8758e7, 2.228e7,
           2.1389e7, 1.8445e7, 1.8499e7, 1.8639e7, 2.5892e7, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 19279579.15057915,
            ips: 51.868352114416375,
            maximum: 3.1223e7,
            median: 1.8668e7,
            minimum: 1.7678e7,
            mode: [1.8164e7, 1.8687e7, 1.8388e7, 1.8629e7, 1.8491e7, 1.8082e7,
             1.8053e7, 1.8078e7, 1.811e7, 1.8339e7],
            percentiles: %{50 => 1.8668e7, 99 => 25304720.0},
            relative_less: nil,
            relative_more: nil,
            sample_size: 777,
            std_dev: 1611261.9915424942,
            std_dev_ips: 4.334819949811578,
            std_dev_ratio: 0.08357350432590187
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {2, 524288},
        input_name: "5: 2^(2^19)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [7.2462e7, 7.485e7, 7.4476e7, 7.4039e7, 7.2681e7, 7.4048e7,
           7.342e7, 7.3639e7, 7.966e7, 7.7501e7, 7.9223e7, 7.7151e7, 7.4987e7,
           7.6334e7, 7.7437e7, 7.6671e7, 7.4389e7, 7.6014e7, 7.718e7, 7.6468e7,
           7.3328e7, 7.7133e7, 7.3985e7, 7.5834e7, 7.4408e7, 7.3273e7, 7.2483e7,
           7.2917e7, 7.3451e7, 7.3055e7, 7.3754e7, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 75232620.0,
            ips: 13.2921065357022,
            maximum: 8.2246e7,
            median: 7.4844e7,
            minimum: 7.1576e7,
            mode: 7.2483e7,
            percentiles: %{50 => 7.4844e7, 99 => 81009880.0},
            relative_less: nil,
            relative_more: nil,
            sample_size: 200,
            std_dev: 2239267.880088037,
            std_dev_ips: 0.39563406437402027,
            std_dev_ratio: 0.029764587224106204
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {3, 19683},
        input_name: "6: 3^(3^9)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [3.78e5, 3.73e5, 3.74e5, 4.51e5, 3.75e5, 3.74e5, 3.73e5,
           4.56e5, 3.76e5, 3.75e5, 3.74e5, 4.06e5, 3.91e5, 3.74e5, 3.74e5, 3.74e5,
           3.74e5, 3.74e5, 3.78e5, 3.74e5, 3.73e5, 3.73e5, 4.37e5, 3.79e5, 3.78e5,
           3.78e5, 4.02e5, 3.74e5, 3.74e5, 4.14e5, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 412872.41984456393,
            ips: 2422.055705189692,
            maximum: 1.639e6,
            median: 3.78e5,
            minimum: 3.72e5,
            mode: 3.74e5,
            percentiles: %{50 => 3.78e5, 99 => 7.25e5},
            relative_less: nil,
            relative_more: nil,
            sample_size: 35899,
            std_dev: 72785.68134801257,
            std_dev_ips: 426.9865612031967,
            std_dev_ratio: 0.17629097476507283
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {3, 59049},
        input_name: "7: 3^(3^10)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [4.626e6, 4.57e6, 4.191e6, 4.105e6, 4.142e6, 4.24e6, 4.093e6,
           4.12e6, 4.2e6, 4.206e6, 4.112e6, 4.083e6, 4.097e6, 4.728e6, 4.105e6,
           4.11e6, 4.199e6, 4.165e6, 4.134e6, 4.069e6, 4.1e6, 4.307e6, 5.603e6,
           4.919e6, 4.561e6, 4.069e6, 4.085e6, 4.12e6, 4.906e6, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 4427458.914268763,
            ips: 225.86319136180163,
            maximum: 1.0176e7,
            median: 4.259e6,
            minimum: 4.06e6,
            mode: 4.074e6,
            percentiles: %{50 => 4.259e6, 99 => 6036119.999999999},
            relative_less: nil,
            relative_more: nil,
            sample_size: 3371,
            std_dev: 462634.297787683,
            std_dev_ips: 23.60090990229099,
            std_dev_ratio: 0.10449205893175216
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {3, 177147},
        input_name: "8: 3^(3^11)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [3.5242e7, 3.2518e7, 3.612e7, 3.3452e7, 3.3395e7, 3.563e7,
           3.3823e7, 3.2988e7, 3.5922e7, 3.3659e7, 3.3577e7, 3.6303e7, 3.4191e7,
           3.3294e7, 3.7052e7, 3.3253e7, 3.3714e7, 3.6623e7, 3.308e7, 3.3004e7,
           3.7079e7, 3.4847e7, 3.3506e7, 3.6539e7, 3.3213e7, 3.2658e7, 3.3084e7,
           3.3134e7, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 34671988.425925925,
            ips: 28.841726286810005,
            maximum: 4.1651e7,
            median: 3.40735e7,
            minimum: 3.2293e7,
            mode: [3.3603e7, 3.6042e7, 3.3255e7, 3.4233e7, 3.4309e7, 3.3808e7,
             3.3504e7, 3.3435e7, 3.4945e7, 3.4301e7, 3.4252e7, 3.3301e7, 3.5049e7,
             3.3452e7, 3.4651e7],
            percentiles: %{50 => 3.40735e7, 99 => 39899100.00000001},
            relative_less: nil,
            relative_more: nil,
            sample_size: 432,
            std_dev: 1601861.5714428218,
            std_dev_ips: 1.332500819548235,
            std_dev_ratio: 0.04620045299291321
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {3, 531441},
        input_name: "9: 3^(3^12)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [2.09446e8, 2.05953e8, 2.07512e8, 2.01834e8, 2.06446e8,
           2.07458e8, 2.05598e8, 2.10021e8, 2.09041e8, 2.10156e8, 2.03371e8,
           2.04437e8, 2.0453e8, 2.07814e8, 2.08934e8, 2.05237e8, 2.03842e8,
           2.09627e8, 2.10113e8, 2.16226e8, 2.07367e8, 2.05227e8, 2.1114e8,
           2.06578e8, 2.10038e8, 2.07724e8, 2.07153e8, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 208569458.33333334,
            ips: 4.794565839077989,
            maximum: 2.27754e8,
            median: 2.079715e8,
            minimum: 2.00562e8,
            mode: nil,
            percentiles: %{50 => 2.079715e8, 99 => 2.27754e8},
            relative_less: nil,
            relative_more: nil,
            sample_size: 72,
            std_dev: 4022665.6005005813,
            std_dev_ips: 0.09247248002806849,
            std_dev_ratio: 0.01928693507019423
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {5, 625},
        input_name: "10: 5^(5^4)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [1.4e4, 5.0e3, 5.0e3, 5.0e3, 4.0e3, 4.0e3, 4.0e3, 3.0e3, 3.0e3,
           2.0e3, 3.0e3, 2.0e3, 3.0e3, 2.0e3, 3.0e3, 3.0e3, 2.0e3, 3.0e3, 2.0e3,
           3.0e3, 2.0e3, 2.0e3, 3.0e3, 3.0e3, 3.0e3, 2.0e3, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 2572.187454737814,
            ips: 388774.15336042497,
            maximum: 1.73e6,
            median: 2.0e3,
            minimum: 2.0e3,
            mode: 2.0e3,
            percentiles: %{50 => 2.0e3, 99 => 6.0e3},
            relative_less: nil,
            relative_more: nil,
            sample_size: 3990638,
            std_dev: 4920.381485289146,
            std_dev_ips: 743692.7439445055,
            std_dev_ratio: 1.9129171461535983
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {5, 3125},
        input_name: "11: 5^(5^5)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [4.8e4, 4.0e4, 2.9e4, 2.9e4, 2.9e4, 2.9e4, 3.0e4, 2.8e4, 2.9e4,
           2.9e4, 2.9e4, 2.9e4, 9.9e4, 3.0e4, 2.9e4, 2.9e4, 2.9e4, 2.9e4, 2.8e4,
           2.9e4, 2.9e4, 2.9e4, 2.9e4, 2.8e4, 2.9e4, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 28884.00076438304,
            ips: 34621.242678857125,
            maximum: 3.007e6,
            median: 2.6e4,
            minimum: 2.5e4,
            mode: 2.6e4,
            percentiles: %{50 => 2.6e4, 99 => 6.6e4},
            relative_less: nil,
            relative_more: nil,
            sample_size: 486667,
            std_dev: 10882.539941506495,
            std_dev_ips: 13044.14368877336,
            std_dev_ratio: 0.376767056277252
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {5, 15625},
        input_name: "12: 5^(5^6)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [6.49e5, 6.46e5, 6.47e5, 6.44e5, 6.48e5, 7.27e5, 6.96e5,
           6.47e5, 6.78e5, 6.45e5, 6.75e5, 6.72e5, 8.57e5, 8.06e5, 7.5e5, 6.52e5,
           6.77e5, 6.72e5, 6.5e5, 7.39e5, 9.3e5, 8.19e5, 6.48e5, 6.47e5, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 703030.7488528313,
            ips: 1422.4128910886864,
            maximum: 2.426e6,
            median: 6.51e5,
            minimum: 6.43e5,
            mode: 6.47e5,
            percentiles: %{50 => 6.51e5, 99 => 1099599.9999999986},
            relative_less: nil,
            relative_more: nil,
            sample_size: 21139,
            std_dev: 99378.11312177038,
            std_dev_ips: 201.06760540294204,
            std_dev_ratio: 0.14135670919647594
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {5, 78125},
        input_name: "13: 5^(5^7)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [1.248e7, 1.2925e7, 1.2888e7, 1.2805e7, 1.5247e7, 1.316e7,
           1.2356e7, 1.2315e7, 1.2391e7, 1.2074e7, 1.2392e7, 1.3919e7, 1.4223e7,
           1.2347e7, 1.2216e7, 1.3123e7, 1.2735e7, 1.2238e7, 1.2151e7, 1.5694e7,
           1.3226e7, 1.2408e7, 1.2103e7, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 13218981.448763251,
            ips: 75.64879365902723,
            maximum: 5.5756e7,
            median: 1.2704e7,
            minimum: 1.1984e7,
            mode: [1.2339e7, 1.2436e7],
            percentiles: %{50 => 1.2704e7, 99 => 19188410.00000011},
            relative_less: nil,
            relative_more: nil,
            sample_size: 1132,
            std_dev: 2092975.9653049817,
            std_dev_ips: 11.977557238154164,
            std_dev_ratio: 0.1583311069326599
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {5, 390625},
        input_name: "14: 5^(5^8)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [3.8203e8, 3.79956e8, 3.94755e8, 3.92796e8, 3.89267e8,
           3.79359e8, 4.36318e8, 3.8964e8, 3.84399e8, 3.81851e8, 3.95065e8,
           3.96384e8, 3.90056e8, 3.98913e8, 3.91555e8, 3.92092e8, 3.77825e8,
           3.9391e8, 3.95315e8, 3.88083e8, 3.77988e8, 3.9472e8, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 389953487.17948717,
            ips: 2.564408404789368,
            maximum: 4.36318e8,
            median: 3.8964e8,
            minimum: 3.75805e8,
            mode: nil,
            percentiles: %{50 => 3.8964e8, 99 => 4.36318e8},
            relative_less: nil,
            relative_more: nil,
            sample_size: 39,
            std_dev: 10143925.008210568,
            std_dev_ips: 0.06670838293243661,
            std_dev_ratio: 0.02601316654860824
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {7, 49},
        input_name: "15: 7^(7^2)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [3.3e4, 3.0e3, 4.0e3, 4.0e3, 2.0e3, 1.0e3, 1.0e3, 1.0e3, 1.0e3,
           1.0e3, 2.0e3, 2.0e3, 3.0e3, 3.0e3, 1.0e3, 3.0e3, 2.0e3, 1.0e3, 1.0e3,
           2.0e3, 1.0e3, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 751.384406865179,
            ips: 1330876.7002126917,
            maximum: 1.15467e8,
            median: 1.0e3,
            minimum: 0.0,
            mode: 1.0e3,
            percentiles: %{50 => 1.0e3, 99 => 2.0e3},
            relative_less: nil,
            relative_more: nil,
            sample_size: 8086315,
            std_dev: 75823.67042903535,
            std_dev_ips: 134301371.41070038,
            std_dev_ratio: 100.91195629860921
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {7, 343},
        input_name: "16: 7^(7^3)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [7.0e3, 2.0e3, 2.0e3, 1.0e3, 2.0e3, 2.0e3, 2.0e3, 2.0e3, 9.0e3,
           1.0e3, 2.0e3, 1.0e3, 2.0e3, 1.0e3, 2.0e3, 1.0e3, 2.0e3, 2.0e3, 1.0e3,
           2.0e3, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 1936.6061443797682,
            ips: 516367.255625055,
            maximum: 1.9468e7,
            median: 2.0e3,
            minimum: 1.0e3,
            mode: 2.0e3,
            percentiles: %{50 => 2.0e3, 99 => 5.0e3},
            relative_less: nil,
            relative_more: nil,
            sample_size: 4742936,
            std_dev: 11093.876420332459,
            std_dev_ips: 2958017.322229057,
            std_dev_ratio: 5.728514521410581
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {7, 2401},
        input_name: "17: 7^(7^4)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [3.6e4, 2.9e4, 2.3e4, 2.0e4, 1.9e4, 2.0e4, 2.0e4, 1.9e4, 1.9e4,
           1.9e4, 2.0e4, 1.9e4, 2.3e4, 2.0e4, 2.0e4, 1.9e4, 2.1e4, 3.9e4, 2.5e4,
           ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 22906.76486852011,
            ips: 43655.22611943608,
            maximum: 1.4034e7,
            median: 2.0e4,
            minimum: 1.8e4,
            mode: 1.9e4,
            percentiles: %{50 => 2.0e4, 99 => 6.2e4},
            relative_less: nil,
            relative_more: nil,
            sample_size: 600396,
            std_dev: 30750.865155330303,
            std_dev_ips: 58604.34589648627,
            std_dev_ratio: 1.3424359717242325
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {7, 16807},
        input_name: "18: 7^(7^5)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [6.53e5, 6.47e5, 6.56e5, 6.55e5, 7.63e5, 8.64e5, 6.93e5,
           6.95e5, 6.54e5, 6.47e5, 6.46e5, 1.171e6, 8.03e5, 7.27e5, 6.55e5,
           7.18e5, 6.53e5, 6.44e5, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 805467.6828935147,
            ips: 1241.5147388752566,
            maximum: 9.27e6,
            median: 7.09e5,
            minimum: 6.35e5,
            mode: 6.4e5,
            percentiles: %{50 => 7.09e5, 99 => 1599959.999999999},
            relative_less: nil,
            relative_more: nil,
            sample_size: 18303,
            std_dev: 280225.2644048228,
            std_dev_ips: 431.9276903997119,
            std_dev_ratio: 0.34790379596380333
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {7, 117649},
        input_name: "19: 7^(7^6)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [6.2272e7, 5.991e7, 6.1748e7, 7.1125e7, 7.9677e7, 8.0273e7,
           7.5559e7, 5.7202e7, 5.4307e7, 5.4433e7, 5.2646e7, 5.3198e7, 5.373e7,
           7.5674e7, 6.6913e7, 6.1176e7, 5.9734e7, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 59862460.0,
            ips: 16.704960003314262,
            maximum: 8.1623e7,
            median: 5.76265e7,
            minimum: 5.1967e7,
            mode: 5.2283e7,
            percentiles: %{50 => 5.76265e7, 99 => 80244950.0},
            relative_less: nil,
            relative_more: nil,
            sample_size: 250,
            std_dev: 6789402.905680488,
            std_dev_ips: 1.8946215037901581,
            std_dev_ratio: 0.1134167039857782
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {11, 121},
        input_name: "20: 11^(11^2)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [1.0e4, 1.0e3, 1.0e3, 2.0e3, 2.0e3, 2.0e3, 2.0e3, 1.0e3, 1.9e4,
           1.0e3, 1.0e3, 0.0, 1.0e3, 2.0e3, 1.0e3, 0.0, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 1225.0440805616468,
            ips: 816297.1568676365,
            maximum: 1.07435e8,
            median: 1.0e3,
            minimum: 0.0,
            mode: 1.0e3,
            percentiles: %{50 => 1.0e3, 99 => 3.0e3},
            relative_less: nil,
            relative_more: nil,
            sample_size: 5726447,
            std_dev: 47047.05475557831,
            std_dev_ips: 31349383.785738807,
            std_dev_ratio: 38.40437703597459
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {11, 1331},
        input_name: "21: 11^(11^3)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [2.0e4, 1.1e4, 1.1e4, 1.1e4, 1.1e4, 1.1e4, 1.1e4, 1.1e4, 1.1e4,
           1.1e4, 1.0e4, 1.1e4, 1.1e4, 1.1e4, 1.1e4, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 13488.491311717153,
            ips: 74137.2757627328,
            maximum: 9.621e6,
            median: 1.1e4,
            minimum: 1.0e4,
            mode: 1.1e4,
            percentiles: %{50 => 1.1e4, 99 => 4.3e4},
            relative_less: nil,
            relative_more: nil,
            sample_size: 962273,
            std_dev: 15696.277592246022,
            std_dev_ips: 86272.01022058594,
            std_dev_ratio: 1.163679260304747
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {11, 14641},
        input_name: "22: 11^(11^4)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [1.55e6, 1.493e6, 1.197e6, 1.19e6, 1.229e6, 1.233e6, 1.187e6,
           1.252e6, 1.195e6, 1.188e6, 1.187e6, 1.313e6, 1.366e6, 1.501e6, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 1418449.4780193467,
            ips: 704.9951482208241,
            maximum: 7.862e6,
            median: 1.325e6,
            minimum: 1.184e6,
            mode: 1.188e6,
            percentiles: %{50 => 1.325e6, 99 => 2304319.9999999995},
            relative_less: nil,
            relative_more: nil,
            sample_size: 10441,
            std_dev: 274934.7347840414,
            std_dev_ips: 136.64755573161455,
            ...
          }
        },
        tag: nil
      },
      %Benchee.Scenario{
        after_each: nil,
        after_scenario: nil,
        before_each: nil,
        before_scenario: nil,
        function: #Function<0.118938362/1 in Benchmark.maths/0>,
        input: {11, 161051},
        input_name: "23: 11^(11^5)",
        job_name: "recursive",
        memory_usage_data: %Benchee.CollectionData{
          samples: [],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: nil,
            ips: nil,
            maximum: nil,
            median: nil,
            minimum: nil,
            mode: nil,
            percentiles: nil,
            relative_less: nil,
            relative_more: nil,
            sample_size: 0,
            std_dev: nil,
            std_dev_ips: nil,
            std_dev_ratio: nil
          }
        },
        name: "recursive",
        run_time_data: %Benchee.CollectionData{
          samples: [1.25012e8, 1.24399e8, 1.25271e8, 1.3663e8, 1.494e8, 1.36528e8,
           1.4127e8, 1.56925e8, 1.79769e8, 1.30312e8, 1.34941e8, 1.37392e8,
           1.36551e8, ...],
          statistics: %Benchee.Statistics{
            absolute_difference: nil,
            average: 146935235.29411766,
            ips: 6.80571952669023,
            maximum: 2.37659e8,
            median: 1.42925e8,
            minimum: 1.23326e8,
            mode: nil,
            percentiles: %{50 => 1.42925e8, 99 => 236341429.99999994},
            relative_less: nil,
            relative_more: nil,
            sample_size: 102,
            std_dev: 18240178.31041061,
            ...
          }
        },
        tag: nil
      }
    ],
    system: %{
      available_memory: "16 GB",
      cpu_speed: "Intel(R) Core(TM) i5-4278U CPU @ 2.60GHz",
      elixir: "1.11.4",
      erlang: "23.3.1",
      num_cores: 4,
      os: :macOS
    }
  }
end
